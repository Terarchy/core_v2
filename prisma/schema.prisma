// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Models
model User {
  id                    String     @id @default(cuid())
  name                  String?
  email                 String?    @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole   @default(SUPPLIER)
  companyName           String?
  companyRegistrationNo String?
  phoneNumber           String?
  address               String?
  country               String?
  kycStatus             KycStatus  @default(PENDING)
  kycDetails            KycDetails?
  notificationsEnabled  Boolean    @default(true)
  twoFactorEnabled      Boolean    @default(false)
  
  accounts Account[]
  sessions Session[]
  
  // Relations based on role
  supplierInvoices      Invoice[]  @relation("SupplierInvoices")
  buyerInvoices         Invoice[]  @relation("BuyerInvoices")
  financierInvestments  Financing[] @relation("FinancierInvestments")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  SUPPLIER
  BUYER
  FINANCIER
}

enum KycStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
}

// KYC, KYB Details
model KycDetails {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // KYC Documents
  identificationDocUrl  String?
  addressProofUrl       String?
  
  // KYB Documents (for company)
  businessRegDocUrl     String?
  taxRegistrationUrl    String?
  financialStatementsUrl String?
  
  // AML Check
  amlCheckCompleted     Boolean  @default(false)
  amlCheckDate          DateTime?
  amlCheckStatus        String?
  
  notes             String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Invoice Models
model Invoice {
  id               String         @id @default(cuid())
  invoiceNumber    String         @unique
  amount           Decimal        @db.Decimal(10, 2)
  currency         String
  issueDate        DateTime
  dueDate          DateTime
  description      String?
  status           InvoiceStatus  @default(DRAFT)
  
  // Risk assessment
  riskScore        Decimal?       @db.Decimal(5, 2)
  riskCategory     RiskCategory?
  
  // Tokenization details
  tokenizedAt      DateTime?
  tokenizationTxHash String?      // Blockchain transaction hash
  
  // Relations
  supplierId       String
  supplier         User           @relation("SupplierInvoices", fields: [supplierId], references: [id])
  
  buyerId          String
  buyer            User           @relation("BuyerInvoices", fields: [buyerId], references: [id])
  
  financing        Financing[]
  payments         Payment[]
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

enum InvoiceStatus {
  DRAFT
  PENDING_APPROVAL
  REJECTED
  VERIFIED
  TOKENIZED
  PARTIALLY_FINANCED
  FULLY_FINANCED
  PARTIALLY_PAID
  PAID
  OVERDUE
}

enum RiskCategory {
  LOW
  MEDIUM
  HIGH
}

// Financing Models
model Financing {
  id               String         @id @default(cuid())
  amount           Decimal        @db.Decimal(10, 2)
  interestRate     Decimal        @db.Decimal(5, 2)  // Annual interest rate
  fundedDate       DateTime       @default(now())
  status           FinancingStatus @default(ACTIVE)
  
  // Relations
  invoiceId        String
  invoice          Invoice        @relation(fields: [invoiceId], references: [id])
  
  financierId      String
  financier        User           @relation("FinancierInvestments", fields: [financierId], references: [id])
  
  payments         Payment[]
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

enum FinancingStatus {
  ACTIVE
  REPAID
  DEFAULTED
}

// Payment Models
model Payment {
  id               String         @id @default(cuid())
  amount           Decimal        @db.Decimal(10, 2)
  paymentDate      DateTime       @default(now())
  transactionRef   String?
  
  // Relations
  invoiceId        String
  invoice          Invoice        @relation(fields: [invoiceId], references: [id])
  
  // Payment might be linked to financing
  financingId      String?
  financing        Financing?     @relation(fields: [financingId], references: [id])
  
  payerId          String
  paymentType      PaymentType
  
  createdAt        DateTime       @default(now())
}

enum PaymentType {
  BUYER_TO_FINANCIER
  BUYER_TO_SUPPLIER
  FINANCIER_TO_SUPPLIER
}
